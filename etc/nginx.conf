# This file contains the basic nginx configs that all our apps use in exactly the same way.
# It includes nginx-app.conf in the 'server' block, which contains app-specific configs like where to find static files.

user nginx;
# Tells nginx to log errors to stderr, so they go to the ELK stack.
error_log /dev/stderr info;
# Put nginx's pid file in /tmp, because we don't want anything writing to anywhere else in the container's filesystem.
pid /tmp/nginx.pid;
# To allow supervisord to retain control over the nginx process, it must not run as a daemon.
daemon off;

events {
  # The default is just 512, which is too low for our needs.
  worker_connections 1024;
}

http {
  # Ensures that nginx sends the appropriate MIME types for each static file it serves.
  include /etc/nginx/mime.types;
  # The default MIME type is text/plain, which is covered by the above line. application/octet-stream is more generic.
  default_type application/octet-stream;

  # Configure the nginx access log.
  # This does two things to the timestamp:
  #  * Strips the timezone (our logstash filter nodes don't expect a timezone, since Apache doesn't supply it).
  #  * Adds milliseconds (critical -- many logs get emitted each second, and we need them ordered properly in ELK).
  map "$time_iso8601 # $msec" $time_iso8601_ms {
   "~(^.+)-0[78]:00 # \d+\.(\d+)$" $1,$2;
  }
  # The ELK stack ingestion looks for lines starting with 'APACHE_ACCESS' in order to apply the proper parsing rules.
  log_format apache 'NGINX $http_x_forwarded_for - $remote_user "$time_iso8601_ms" "$request" '
                    '$status $body_bytes_sent "$http_referer" "$http_user_agent"';
  # Tell nginx's access log to write to stdout (so the ELK stack will get them), using the log_format we just defined.
  access_log /dev/stdout apache;

  # Improves the performance of serving static files, which is most of what nginx does for us, so performance is key.
  sendfile on;
  tcp_nopush on;

  server {
    listen 8443 ssl http2;

    location /static/seedling/  {
      gzip_static on;
      expires max;
      add_header Cache-Control public;
      # The static files live in /static/ on the filesystem. They live elsewhere in some older, non-Django apps.
      alias /static/;
    }

   ######## GENERIC server CONFIGS ########

    server_name localhost;
    client_max_body_size 100M;
    client_header_timeout 305s;
    client_body_timeout 305s;
    keepalive_timeout 305s;

    # Disable the TRACE and TRACK methods.
    if ($request_method ~ ^(TRACE|TRACK)$ ) {
       return 405;
    }

    # Make nginx not complain about our access.caltech headers.
    underscores_in_headers on;
    # Don't send the nginx version number in error pages or the Server header.
    server_tokens off;

    # Proxies all communication, except whatever the app-specific configs define, to the gunicorn server that is bound
    # to the socket at /tmp/app.sock.
    location / {
      proxy_pass http://unix:/tmp/app.sock;
      proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
      proxy_set_header Host $http_host;
      proxy_set_header X-Forwarded-Proto $scheme;
      proxy_redirect off;
  	  proxy_read_timeout 305s;
  	  proxy_send_timeout 305s;
    }

    # Create the view that the ALB Target Group health check will look at.
    location /lb-status {
      return 200 'Hello, Mr. Load balancer.';
      add_header Content-Type text/plain;
    }

    # Don't spam logs about the favicon not being found. We cannot serve it at /favicon.ico from behind access.caltech.
    # This can be removed from non-access.caltech apps, but if you do, make sure your base template is specifying where
    # the actual favicon.ico file lives, using e.g. <link rel="shortcut icon" href="/static/images/favicon.ico">.
    location = /favicon.ico {
      access_log off;
      log_not_found off;
    }

    ######## SECURITY CONFIGURATION ########

    # Enable HTTP Strict Transport Security. This causes the browser to ONLY ever try to access the domain over https
    # once its established a secure connection at least once. It won't even attempt http again until max-age number of
    # seconds have passed since the last https request. The suggested max-age is 63072000, which is 2 years.
    # This is a bit redundant, since none of our apps are served over http anyway (the ALB auto-redirects to https).
    # But it's a best practice, and security auditors will complain if you don't offer it.
    add_header Strict-Transport-Security "max-age=63072000";
    # If an XSS attack is detected by the browser, this prevents the page from being rendered at all. Most browsers
    # don't support this any more (they expect the server to issue CSP headers), but some still do.
    add_header X-XSS-Protection "1; mode=block";

    # Use the certificates that we generate during the docker image build. These are often replaced in dev by a volume
    # mount set up in docker-compose.yml.
    # Note that the Load Balancer in test/prod provides all the SSL functionality for the client connection.
    # The only thing we're defining below here is how the Load Balancer communicates with this app server.
    ssl_certificate /etc/pki/tls/certs/localhost.crt;
    ssl_certificate_key /etc/pki/tls/private/localhost.key;

    # Enable session resumption to improve https performance from the ALB to the app server. This turns on both session
    # ID caching and session tickets, though I'm not actually sure the caching is needed. It shouldn't hurt, though.
    # ALBs support this: https://aws.amazon.com/premiumsupport/knowledge-center/elb-ssl-tls-session-resumption-support/
    ssl_session_cache shared:SSL:50m;
    ssl_session_timeout 1d;
    ssl_session_tickets on;
  }
}
